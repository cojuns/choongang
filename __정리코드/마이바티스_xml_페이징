<!-- src/main/resources/mappers/YourMapper.xml -->
<mapper namespace="com.example.mapper.YourMapper">
    <select id="findAllWithPaging" resultType="com.example.domain.YourEntity">
        SELECT * FROM table
        LIMIT #{size}
        OFFSET #{offset}
    </select>
</mapper>


package com.example.mapper;

import com.example.domain.YourEntity;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import java.util.List;

@Mapper
public interface YourMapper {
    List<YourEntity> findAllWithPaging(@Param("offset") int offset, @Param("size") int size);
}


package com.example.service;

import com.example.domain.YourEntity;
import com.example.mapper.YourMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class YourService {
    private final YourMapper yourMapper;

    @Autowired
    public YourService(YourMapper yourMapper) {
        this.yourMapper = yourMapper;
    }

    public List<YourEntity> findAllWithPaging(int page, int size) {
        int offset = (page - 1) * size;
        return yourMapper.findAllWithPaging(offset, size);
    }
}


package com.example.controller;

import com.example.domain.YourEntity;
import com.example.service.YourService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;

@RestController
public class YourController {
    private final YourService yourService;

    @Autowired
    public YourController(YourService yourService) {
        this.yourService = yourService;
    }

    @GetMapping("/items")
    public List<YourEntity> getItemsWithPaging(
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "10") int size) {
        return yourService.findAllWithPaging(page, size);
    }
}



//    @PostMapping("/loginForm")
//    public String loginProcess(@RequestParam Long mem_no, @RequestParam String mem_pw) {
//        MemberDto member = loginDao.getLoginId(mem_no);
//        System.out.println("member =======> "+member);
//        if (member != null) {
//            // 비밀번호 매칭 확인
//            if (passwordEncoder.matches(mem_pw, member.getMem_pw())) {
//                // Spring Security로 사용자 인증을 진행
//                List<GrantedAuthority> authorities = new ArrayList<>();
//                authorities.add(new SimpleGrantedAuthority("ROLE_USER"));
//                Authentication authentication = new UsernamePasswordAuthenticationToken(member, null, authorities);
//                SecurityContextHolder.getContext().setAuthentication(authentication);
//
//                // 로그인 성공 후 리다이렉트
//                return "/";
//            }
//        }
//        // 로그인 실패 시 다시 로그인 페이지로 이동
//        return "redirect:/login/joinForm";
//    }


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import com.class302.omzteam.member.model.MemberDto;
import com.class302.omzteam.mybatis.LoginDao;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private LoginDao loginDao; // 사용자 정보를 데이터베이스에서 가져오는 DAO

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        if (username == null || username.isEmpty()) {
            throw new UsernameNotFoundException("사용자 아이디를 입력하세요.");
        }

        MemberDto member = loginDao.getLoginId(Long.parseLong(username));
        System.out.println(member);

        if (member == null) {
            throw new UsernameNotFoundException("사용자를 찾을 수 없습니다: " + username);
        }

        // 사용자 정보로 UserDetails 객체 생성
        return org.springframework.security.core.userdetails.User.builder()
                .username(member.getMem_no().toString()) // 아이디 설정
                .password(member.getMem_pw()) // 암호화된 비밀번호 설정
                .roles("USER") // 사용자 역할 설정
                .build();
    }
}

