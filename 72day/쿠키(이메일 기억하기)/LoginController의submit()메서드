   @PostMapping
    public String submit(LoginCommand loginCommand, Errors errors
    		                                 , HttpSession session, HttpServletResponse response) {
        new LoginCommandValidator().validate(loginCommand, errors);
        if (errors.hasErrors()) {
            return "login/loginForm";
        }
        try {
            AuthInfo authInfo = authService.authenticate(
                    loginCommand.getEmail(),
                    loginCommand.getPassword());
            session.setAttribute("authInfo", authInfo);
            session.setAttribute("test", authInfo);
            //세션에 authinfo 저장해야 함.
            AuthInfo authInfo1 = (AuthInfo) session.getAttribute("authInfo");
            log.info("-------------------"+authInfo1);
            
            // 쿠키 생성
            Cookie rememberCookie = new Cookie("REMEMBER", loginCommand.getEmail());
            rememberCookie.setPath("/");
            if(loginCommand.isRememberEmail()) {
            	rememberCookie.setMaxAge(60 * 60 * 24 * 30); // 30일 쿠키 저장 기간
            }else {
				rememberCookie.setMaxAge(0);
			}
            response.addCookie(rememberCookie);
            	
            	
            return "login/loginSuccess";
        } catch (WrongIdPasswordException e) {
            errors.reject("idPasswordNotMatching");
            return "login/loginForm";
        }
    }
